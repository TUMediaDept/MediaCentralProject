apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
//repositories {
//    mavenCentral()
//    // 카카오 SDK 사용 명시
//    maven {
//        url 'http://devrepo.kakao.com:8088/nexus/content/groups/public/'
//    }
//}

def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.tumedia.mediaandroidpractice"
        minSdkVersion 16
//        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        /**
         * versionName [<major> . <minor> . <point>]
         *
         * major: 컨셉이나 앱이 지향하는 기본 디자인이 변경된 경우 -> 앱의 큰 틀이 변화된 경우
         * minor: 기능 추가, 기능 삭제 및 사양 등이 변경된 경우
         * point: 버그 수정, 디자인 수정 등
         *
         * DEFAULT ver. "1.0.0"
         */
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    /**
     * 어플리케이션 서명(singing) keystore 관련 설정 분리
     */
    signingConfigs {
        // 개발
        debug {
            keyAlias keystoreProperties['KeyAlias']
            keyPassword keystoreProperties['KeyPassword']
            storeFile file(rootDir.getCanonicalPath() + "/" + keystoreProperties['KeyStore'])
            storePassword keystoreProperties['StorePassword']
        }
        // 운영
        release {
            keyAlias keystoreProperties['KeyAlias']
            keyPassword keystoreProperties['KeyPassword']
            storeFile file(rootDir.getCanonicalPath() + "/" + keystoreProperties['KeyStore'])
            storePassword keystoreProperties['StorePassword']
        }
    }

    buildTypes {
        // 개발
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        // 운영
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    /**
     *  빌드 변형 구성(FLAVOR)
     */
    flavorDimensions "version"
    productFlavors {
        // 개발용
        dev {
            minSdkVersion 21 // 레거시 멀티덱스 피하기 위함:: 개발 시에만 minSdkVersion 올려줌 [빌드 속도 개선]
            manifestPlaceholders = [appLabel: "(D)스마트카톡"]
            buildConfigField 'boolean', 'IS_REAL', 'false'
        }
        // 운영(배포용)
        rel {
            manifestPlaceholders = [appLabel: '@string/app_name']
            buildConfigField 'boolean', 'IS_REAL', 'true'
        }
    }

//    /**
//     * 데이터바인딩 사용
//     */
//    dataBinding {
//        enabled true
//    }

    /**
     * RxJava 람다식 표현(java 1.8 이상 지원)
     */
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

//    packagingOptions {
//        exclude 'META-INF/proguard/androidx-annotations.pro'
//    }


}

dependencies {
    /**
     * 안드로이드 Gradle에 라이브러리 추가하는 implementation 종류
     * 1. implementation : 항상 적용.
     * 2. debugImplementation : 디버그 빌드 시에만 적용.
     * 3. releaseImplementation : 릴리즈 빌드 시에만 적용.
     * 4. testImplementation : 테스트 코드를 수행할 때만 적용.
     */
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // Material Design
    implementation 'com.google.android.material:material:1.2.0-alpha05'

    /**
     * Android Architecture Components(AAC)
     *  # ViewModel
     *  # Room
     */
    // ViewModel & LiveData
//    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
//    implementation 'androidx.lifecycle:lifecycle-runtime:2.1.0'
//    implementation 'androidx.lifecycle:lifecycle-common-java8:2.1.0'

    // if using Java8, use the following instead of lifecycle-compiler
//    implementation "androidx.lifecycle:lifecycle-reactivestreams:2.1.0"

//    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.1.0'
//    implementation 'android.arch.lifecycle:runtime:1.1.1'
//    implementation 'android.arch.lifecycle:extensions:1.1.1'
//    annotationProcessor 'android.arch.lifecycle:compiler:1.1.1.'


    /** Room (SQLite) */
//    def room_version = "2.2.2"
    implementation "androidx.room:room-runtime:2.2.4"
    annotationProcessor "androidx.room:room-compiler:2.2.4"
    implementation "android.arch.persistence.room:runtime:1.1.1"
    implementation "androidx.room:room-rxjava2:2.2.4"

    // Cordova 8.0.0 Library Module
    implementation project(':libCordova')

    /** Dagger2 (DI) */
    implementation 'com.google.dagger:dagger:2.25.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.25.2'
    implementation 'com.google.dagger:dagger-android:2.25.2'
    implementation 'com.google.dagger:dagger-android-support:2.25.2'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.25.2'

    /** KAKAO */
    // 카카오 로그인 sdk를 사용하기 위해 필요.
    implementation group: 'com.kakao.sdk', name: 'usermgmt', version: '1.25.0'
    // 카카오링크 sdk를 사용하기 위해 필요.
    implementation group: 'com.kakao.sdk', name: 'kakaolink', version: '1.25.0'
    // 카카오톡 sdk를 사용하기 위해 필요.
    implementation group: 'com.kakao.sdk', name: 'kakaotalk', version: '1.25.0'
//    // 카카오내비 sdk를 사용하기 위해 필요.
//    implementation group: 'com.kakao.sdk', name: 'kakaonavi', version: project.KAKAO_SDK_VERSION
//    // 카카오스토리 sdk를 사용하기 위해 필요.
//    implementation group: 'com.kakao.sdk', name: 'kakaostory', version: project.KAKAO_SDK_VERSION
//    // push sdk를 사용하기 위해 필요.
    implementation group: 'com.kakao.sdk', name: 'push', version: '1.25.0'

    // reactiveX
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.jakewharton.rxbinding:rxbinding:1.0.0'

    /** NETWORK ( Retrofit + Okhttp + Gson ) */
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.2'
    // Okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'
    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'


    // Glide
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    // permission dispatcher
    implementation "org.permissionsdispatcher:permissionsdispatcher:4.6.0"
    annotationProcessor "org.permissionsdispatcher:permissionsdispatcher-processor:4.6.0"

    // Logger
    implementation 'com.orhanobut:logger:2.2.0'

    //Stetho (android debugging lib)
//    implementation 'com.facebook.stetho:stetho:1.5.1'

    // Android Room Database debugging lib
    // debugImplementation: 디버그 빌드 시에만 적용
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'

    /** Firebase */
    // add the Firebase SDK for Google Analytics
//    implementation 'com.google.firebase:firebase-analytics:17.2.3'
    implementation 'com.google.firebase:firebase-analytics'
    // add SDKs for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries
}
